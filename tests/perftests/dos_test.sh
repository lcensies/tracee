#!/bin/bash -ex

SCRIPT_DIR="$(cd ${0%/*} && pwd -P)"

PROMETHEUS_ADDR=http://localhost:9090
WEBHOOK_ADDR=http://192.168.81.1:3434

TEST_TYPE=pgbench
TEST_DURATION=60

DOCKER_INTERACTIVE_FLAG=-d
DOCKER_TRACEE_IMAGE=tracee:events_merging_disabled
# DOCKER_IMAGE=aquasec/tracee:latest

TRACEE_CPU_LIMIT=${TRACEE_CPU_LIMIT:-"1"}
TRACEE_NO_CONTAINER=false
TRACEE_ROOT=$(git rev-parse --show-toplevel)
TRACEE_CACHE_TYPE=${TRACEE_CACHE_TYPE:-mem}
TRACEE_CACHE_STAGE="after-decode"
TRACEE_MEM_CACHE_SIZE=${TRACEE_MEM_CACHE_SIZE:-512}
# TRACEE_MEM_CACHE_SIZE=${TRACEE_MEM_CACHE_SIZE:-512}
TRACEE_DISK_CACHE_SIZE=${TRACEE_DISK_CACHE_SIZE:-16384}
TRACEE_PERF_BUFFER_SIZE=${TRACEE_PERF_BUFFER_SIZE:-1024}
TRACEE_LISTEN_ADDR=http:/localhost:3366
TRACEE_EVENTS_SINK_TIMEOUT=${TRACEE_EVENTS_SINK_TIMEOUT:-5}
TRACEE_LOG_FILE=${TRACEE_LOG_FILE:-/tmp/tracee/tracee.log}
TRACEE_EXE=/tracee/tracee
# TRACEE_EVENTS=security_file_open
# --output [webhook|forward]:[protocol://user:pass@]host:port[?k=v#f]
# --output out-file:/tmp/tracee/tracee.log -
TRACEE_EVENTS=vfs_read,vfs_readv,vfs_write,creat,chmod,fchmod,chown,fchown,lchown,ptrace,setuid,setgid,setpgid,setsid,setreuid,setregid,setresuid,setresgid,setfsuid,setfsgid,init_module,fchownat,fchmodat,setns,process_vm_readv,process_vm_writev,finit_module,memfd_create,move_mount,sched_process_exec,security_inode_unlink,security_socket_connect,security_socket_accept,security_socket_bind,security_sb_mount,net_packet_icmp,net_packet_icmpv6,net_packet_dns_request,net_packet_dns_response,net_packet_http_request,net_packet_http_response
TRACEE_CACHE_FLAGS="--cache cache-stage=$TRACEE_CACHE_STAGE --cache cache-type=$TRACEE_CACHE_TYPE --cache mem-cache-size=$TRACEE_MEM_CACHE_SIZE"

# TRACEE_OUTPUT_FILE="/tmp/tracee/output.json"
# TRACEE_OUTPUT_FLAGS="--output json --output out-file:${TRACEE_OUTPUT_FILE}"
# TRACEE_OUTPUT_FLAGS="--output none"
# --output [webho3k|forward]:[protocol://user:pass@]host:port[?k=v#f]
TRACEE_OUTPUT_FLAGS="--output webhook:$WEBHOOK_ADDR"

TRACEE_LOG_FLAGS="--log debug --log file:$TRACEE_LOG_FILE"

TRACEE_FLAGS="$TRACEE_LOG_FLAGS $TRACEE_OUTPUT_FLAGS $TRACEE_CACHE_FLAGS --metrics --healthz=true  -e $TRACEE_EVENTS"
# TRACEE_FLAGS="--config /etc/tracee/config.yaml"

TRACEE_BENCH_CMD="go run $TRACEE_ROOT/cmd/tracee-bench/main.go --single=true --output json"
TRACEE_BENCHMARK_OUTPUT_FILE=${TRACEE_BENCHMARK_OUTPUT_FILE:-""}

DOCKER_POSTGRES_IMAGE=postgres:16.2

# connection parameters

DATABASE_HOST=postgres
DATABASE_USER=admin
DATABASE_PASSWORD=secret
DATABASE_NAME=pgbench

# TODO: move pgbench to separate file

# pgbench parameters

# Multiply the number of rows generated by the scale factor. For example, -s 100 will create 10,000,000 rows in the pgbench_accounts table. Default is 1. When the scale is 20,000 or larger, the columns used to hold account identifiers (aid columns) will switch to using larger integers (bigint), in order to be big enough to hold the range of account identifiers.
PGBENCH_SCALE=50    # scale factor (keep it higher or equal to concurrent clients)
PGBENCH_CLIENTS=30  # clients or concurrent db sessions
PGBENCH_RATE=15000  # rate limit, number of transactions per second
PGBENCH_THREADS=10  # number of threads to run to manage connections
PGBENCH_DURATION=60 # test duration

# script to use, one of tpcb-like, simple-update, select-only with optional weight
PGBENCH_SCRIPT=tpcb-like

# pg_dump parameters
PG_DUMP_FORMAT=plain
PGBENCH_ROOT=/home/vagrant/pgbench-docker

# DOS_ENABLED=true
DOS_SLEEP_DURATION_SEC=${DOS_SLEEP_DURATION_SEC:-0.018}
DOS_DURATION_SEC=${DOS_DURATION_SEC:-$TEST_DURATION}
DOS_CMD=/app/dos
DOS_N_FAKE_COMMANDS="20000"
DOS_MALICIOUS_COMMAND='>/tmp/some_file && date && echo 123 >> /tmp/other_file && cat /tmp/other_file'
DOS_CPU_LIMIT=${DOS_CPU_LIMIT:-"0.8"}
# DOS_CMD="while true; do cat /etc/passwd && date && sleep 0.2; done"

start_prometheus() {
	perf_compose="$TRACEE_ROOT/performance/dashboard/docker-compose.yml"
	docker-compose -f "$perf_compose" up -d
}

clear_prometheus() {

	perf_compose=$TRACEE_ROOT/performance/dashboard/docker-compose.yml
	docker-compose -f $perf_compose down
	docker volume rm dashboard_prometheus_data 2>/dev/null || :

	# Set the match[] argument to "{}" to match all metrics
	# MATCHERS='{}'
	# curl -X POST "$PROMETHEUS_ADDR/api/v1/admin/tsdb/delete_series" -H "Content-Type: application/json" --data "{\"match[]\":[\"$MATCHERS\"]}"

}

clear_server() {
	timeout 1 curl -X POST "$WEBHOOK_ADDR/reset" 2>/dev/null || :
}

stop_postgres() {
	docker-compose -f "$PGBENCH_ROOT/docker-compose.yml" down
}

tracee_is_running() {
	if [ -n "$(docker ps -q --filter "ancestor=tracee")" ]; then
		return 0 # True, container is found
	fi
	return 1 # False, container is not found
}

# Teardown outdated instances of dos and tracee containers
teardown() {
	echo Tearing down existing tracee and dos containers
	docker stop tracee dos 2>/dev/null || :

	stop_postgres

	while [ $(tracee_is_running) ]; do
		sleep 0.1
	done

	clear_prometheus
	clear_server
}

build_tracee_docker() {
	(docker image ls | grep $DOCKER_TRACEE_IMAGE) ||
		(cd /vagrant && make -f builder/Makefile.tracee-container build-tracee)
}

run_tracee() {
	echo Starting tracee

	if [ "${TRACEE_NO_CONTAINER}" = true ]; then
		TRACEE_CMD="/vagrant/dist/tracee"
		sudo -b $TRACEE_CMD $TRACEE_FLAGS
	else
		# build_tracee_docker
		TRACEE_CMD="docker run --cpus ${TRACEE_CPU_LIMIT} --name tracee -e TRACEE_EXE=${TRACEE_EXE} ${DOCKER_INTERACTIVE_FLAG} --rm --pid=host --cgroupns=host --privileged -v /etc/os-release:/etc/os-release-host:ro -v /boot:/boot -v /var/run:/var/run:ro -v /tmp/tracee:/tmp/tracee -v ${SCRIPT_DIR}/tracee:/etc/tracee -p 3366:3366 $DOCKER_TRACEE_IMAGE"
		$TRACEE_CMD $TRACEE_FLAGS
	fi

	echo TRACEE_CMD is "$TRACEE_CMD"

	# docker run --name tracee -d --rm --pid=host --cgroupns=host --privileged -e TRACEE_EXE=$TRACEE_EXE -v /run/docker.sock:/var/run/docker.sock \
	# 	-v /var/run:/var/run:ro -v /tmp/tracee:/tmp/tracee -v /boot:/boot -v $(pwd)/tracee:/etc/tracee -v /etc/os-release:/etc/os-release-host:ro -e "${TRACEE_EVENTS}" \
	# 	-p 3366:3366 tracee:latest --healthz=true --metrics --output json --output out-file:${TRACEE_LOG_FILE} "${tracee_cache_params[@]}" \
	# 	--perf-buffer-size="${TRACEE_PERF_BUFFER_SIZE}"

	# -o option:sort-events # --proctree source=events

	echo Waiting for tracee to start
	while
		! (curl -s "$TRACEE_LISTEN_ADDR/healthz" | grep -q "OK")
	do sleep 1; done
}

run_pgbench() {
	exported_env="$(cat "$0" | grep -E "^PG|^DATABASE|DOCKER_POSTGRES" | grep -v exported)"
	echo "$exported_env" >"$PGBENCH_ROOT/.env"
	cd "$PGBENCH_ROOT" && source "$PGBENCH_ROOT/.env" && make db && make pgbench
}

run_dos() {

	cd /vagrant && make -f builder/Makefile.dos-container

	echo Starting dos container for $DOS_DURATION_SEC seconds
	# dos "$DOS_N_FAKE_COMMANDS" "$DOS_MALICIOUS_COMMAND" "$DOS_SLEEP_DURATION_SEC"
	docker run -d --rm --name dos \
		--cpus "$DOS_CPU_LIMIT" \
		-e DOS_DURATION_SEC="$DOS_DURATION_SEC" \
		-e DOS_CMD="$DOS_CMD" \
		-e DOS_N_FAKE_COMMANDS="$DOS_N_FAKE_COMMANDS" \
		-e DOS_MALICIOUS_COMMAND="$DOS_MALICIOUS_COMMAND" \
		-e DOS_SLEEP_DURATION_SEC="$DOS_SLEEP_DURATION_SEC" dos

	sleep $DOS_DURATION_SEC

	docker kill dos 2>/dev/null || :
}

# Wait until all events from cache are consumed
wait_tracee_sink() {
	cache_load=1

	while [ "$cache_load" != "0" ]; do
		cache_load="$(${TRACEE_BENCH_CMD} 2>/dev/null | jq .cacheLoad)"
		sleep 1
		if [ ! $(tracee_is_running) ]; then
			return
		fi
	done
}

run_benchmark() {
	echo -e "\n"

	if [ "$TRACEE_BENCHMARK_OUTPUT_FILE" != "" ]; then
		benchmark_dir=${TRACEE_BENCHMARK_OUTPUT_FILE%/*}
		sudo rm -r "$benchmark_dir" 2>/dev/null || :
		mkdir -p "$benchmark_dir"
		$TRACEE_BENCH_CMD >"$TRACEE_BENCHMARK_OUTPUT_FILE" 2>/dev/null
	else
		$TRACEE_BENCH_CMD 2>/dev/null
	fi
}

fetch_stats() {
	curl "$WEBHOOK_ADDR"
}

# TODO: refactor
stop_tracee() {
	# sudo killall tracee 2>/dev/null || :
	docker stop tracee 2>/dev/null || :
}

_main() {

	teardown

	start_prometheus
	run_tracee

	case "$TEST_TYPE" in
	"pgbench") run_pgbench ;;
	"dos") run_dos ;;
	*) echo invalid test type && exit 1 ;;
	esac

	wait_tracee_sink

	stop_tracee

	fetch_stats
	run_benchmark

}

_main
